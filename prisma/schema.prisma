// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @unique
  username  String   @unique
  email     String   @unique
  createdAt DateTime @default(now())

  // Beziehungen
  families     Member[] // Verknüpfungstabelle zu Family
  FamilyMember FamilyMember[]
}

model Family {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  dueDate   DateTime?
  drawn     Boolean   @default(false)

  // Beziehungen
  wishLists    WishList[] // Wunschlisten der Familienmitglieder
  FamilyMember FamilyMember[]
}

model FamilyMember {
  id           String   @id @default(uuid())
  memberId     String
  familyId     String
  joinedAt     DateTime @default(now())
  hasSubmitted Boolean  @default(false)
  giver        Member?  @relation("Giver", fields: [memberId], references: [id])
  userId       String?

  // Beziehungen
  member Member @relation(fields: [memberId], references: [id], name: "Member", map: "FamilyMember_memberId_fk")
  family Family @relation(fields: [familyId], references: [id], map: "FamilyMember_familyId_fk")
  user   User?  @relation(fields: [userId], references: [id])

  @@unique([memberId, familyId]) // Ein Benutzer kann nur einmal pro Familie Mitglied sein}
}

model Member {
  id     String  @id @default(uuid())
  userId String?
  name   String

  // Beziehungen
  wishLists    WishList[] // Wunschlisten des Benutzers in verschiedenen Familien
  user         User?          @relation(fields: [userId], references: [id])
  FamilyMember FamilyMember[] @relation("Member")
  giver        FamilyMember[] @relation("Giver")

  @@unique([userId]) // Ein Benutzer kann nur einmal pro Familie Mitglied sein
}

model WishList {
  id        Int      @id @default(autoincrement())
  familyId  String // Die Familie, zu der die Wunschliste gehört
  createdAt DateTime @default(now())

  // Beziehungen
  family   Family   @relation(fields: [familyId], references: [id])
  wishes   String[] // Die individuellen Wünsche
  Member   Member   @relation(fields: [memberId], references: [id])
  memberId String

  @@unique([memberId, familyId]) // Eine Wunschliste pro Benutzer und Familie
}
